#!/usr/bin/env ruby

require 'bundler/setup'
Bundler.require
require 'pp'

enable :sessions
set :session_secret, "something completely random, even though not generated by a random generator"

Mongoid.configure do |config|
  config.allow_dynamic_fields = false
  config.connect_to "dolmetscher_mongoid"
end

class GoogleClient
  # FIXME store credentials
  # FIXME provide initialized client
end

class Project
  include Mongoid::Document
  include Mongoid::Timestamps

  field :name, type: String
  field :locales_root, type: String
  field :default_locale, type: String, default: "en"

  # FIXME belongs_to :google_client

  DROP_EXTENSION = ->(f) { f.sub(/\..+\.yml$/, '') }

  def locale_files(locale=nil)
    Dir[File.join(self.locales_root, "**", (locale.nil? ? "*.yml" : "*.#{locale}.yml"))].reject { |f|
      (ext, locale, name) = File.basename(f).split(".").reverse; name == "rails"
    }
  end

  def files(locale=nil)
    locale_files(locale).map { |f| f.sub(locales_root, '').sub(/\..+\.yml$/, '') }
  end

  def locales
    locale_files.inject([]) { |m, f| (ext, locale, name) = File.basename(f).split('.').reverse; m.push(locale) }.uniq
  end

  def missing_files(locale)
    return [] if locale == default_locale
    base   = locale_files(default_locale).map &DROP_EXTENSION
    locale = locale_files(locale).map &DROP_EXTENSION

    base - ( base & locale )
  end

  def translations(locale=self.default_locale, file=nil)
    if file.nil?
      locale_files(locale).inject({}) { |m,f| m.deep_merge(Psych.load_file(f)[locale] || {}) }
    else
      Psych.load_file(file)[locale] || {}
    end
  end

  def translations_lookup(locale=self.default_locale, file=nil)
    Project.to_lookup_table(translations(locale, file))
  end

  def file_for(lookup)
    @@cache ||= {}

    found = locale_files.detect do |file|
      value = @@cache[file] || Psych.load_file(file)[default_locale] || {}

      if !@@cache.has_key?(file)
        @@cache[file] = value
      end

      lookup.split(".").each do |key|
        value = value[key]
        break if value.nil?
      end

      !value.nil?
    end

    found ? found.sub(/\..+\.yml$/, '').sub(locales_root, '') : found
  end

  def missing_translations(locale)
    return [] if locale == default_locale

    base   = translations_lookup
    locale = translations_lookup(locale)

    locale.delete_if { |k,v| v == "" || v.nil? || v =~ /^TRANSLATE|TODO/ }

    base.keys - ( base.keys & locale.keys )
  end

  def self.to_lookup_table(hash, table={}, lookup="")
    hash.each do |key, value|
      new_lookup = (lookup.split(".").push(key)).join(".")

      if value.is_a?(Hash)
        table = to_lookup_table(value, table, new_lookup).merge(table)
      else
        table[new_lookup] = value
      end
    end

    table
  end

  def self.to_hash(lookup_table)
    hash = {}

    lookup_table.each do |lookup, value|
      keys = lookup.split(".")
      pos  = nil;

      while key = keys.pop
        pos = pos.nil? ? { key => value } : { key => pos.dup }
      end

      hash = pos.deep_merge(hash)
    end

    hash
  end
end

helpers do
  def content_blocks
    @content_blocks ||= Hash.new {|h,k| h[k] = [] }
  end
  def content_for(key, &block)
    content_blocks[key.to_sym] << block
  end
  def content_for?(key)
    content_blocks[key].any?
  end
  def yield_content(key)
    content_blocks[key].map { |content| content.call() }
  end
end

get '/' do
  @projects = Project.all
  erb :home
end

post '/project' do
  @project = Project.create(
    name: params[:name],
    locales_root: params[:locales_root],
    default_locale: params[:default_locale]
  )

  redirect to("/project/#{@project.id}")
end

get '/project/add_project' do
  @project = Project.new
  erb :new_project
end

get '/project/:id' do
  @project = Project.find(params[:id])
  erb :project
end

post '/project/:id/add_locale' do
  # FIXME: Create new locale
end

get '/project/:id/:locale' do
  @project = Project.find(params[:id])
  @locale  = params[:locale]

  @base_translations = @project.translations_lookup
  @translations      = @project.translations_lookup(@locale)

  erb :project_locale
end

get '/project/:id/:locale/missing' do
  @project = Project.find(params[:id])
  @locale  = params[:locale]

  @base_translations    = @project.translations_lookup
  @missing_files        = @project.missing_files(@locale)
  @missing_translations = @project.missing_translations(@locale)
  @orphan_translations  = {} # FIXME

  erb :project_missing
end

get '/project/:id/:locale/create_file/:path' do
  @project = Project.find(params[:id])
  @locale  = params[:locale]
  @path    = File.join(@project.locales_root, params[:path] + ".#{@locale}.yml")

  unless File.exists?(@path)
    File.open(@path, File::CREAT|File::WRONLY) do |f|
      f.puts "# created by dolmetscher, #{Time.now}"
      f.puts "#{@locale}:"
    end
  end

  redirect to("/project/#{@project.id}/#{@locale}/missing")
end

post '/project/:id/:locale/add_translations' do
  @project = Project.find(params[:id])
  @locale  = params[:locale]
  @file    = params[:file]

  params.each do |lookup, value|
    next if %w[file project id locale splat captures].include?(lookup)

    next if value.nil? || value == ""

    file = @file.nil? ? @project.file_for(lookup) : @file
    next if file.nil?

    file = File.join(@project.locales_root, "#{file}.#{@locale}.yml")

    stored = if File.exists?(file)
      Psych.load_file(file)[@locale]
    else
      {}
    end || {}

    stored = stored.deep_merge(Project.to_hash({lookup => value}))

    File.open(file, File::WRONLY|File::CREAT|File::TRUNC) do |f|
      f.puts "# updated by dolmetscher, #{Time.now}"
      f.puts Psych.dump({ @locale => stored }).sub(/\A---\n/, '')
    end
  end

  redirect @file ?
    to("/project/#{@project.id}/#{@locale}/redo/#{Rack::Utils.escape(@file)}") :
    to("/project/#{@project.id}/#{@locale}/missing")
end

get '/project/:id/:locale/find' do
  @project = Project.find(params[:id])
  @locale  = params[:locale]

  erb :find
end

post '/project/:id/:locale/find' do
  @project = Project.find(params[:id])
  @locale  = params[:locale]
  @query   = %r(#{params[:query]})ix

  finder = ->(k,v) { k =~ @query || v =~ @query }

  # search default locale keys & values
  @default = @project.translations_lookup.select(&finder)
  # search choosen locale keys & values
  unless @project.default_locale == @locale
    @trans   = @project.translations_lookup(@locale).select(&finder)
  end

  erb :found
end

get '/project/:id/:locale/redo' do
  @project = Project.find(params[:id])
  @locale  = params[:locale]

  @files = @project.files(@project.default_locale)

  erb :redo
end

get '/project/:id/:locale/redo/:path' do
  @project = Project.find(params[:id])
  @locale  = params[:locale]
  @file    = params[:path]

  @translations = @project.translations_lookup(
    @locale, File.join(@project.locales_root, @file + ".#{@locale}.yml")
  )

  @base_translations = if @locale != @project.default_locale
    @project.translations_lookup(
      @project.default_locale,
      File.join(@project.locales_root, @file + ".#{@project.default_locale}.yml")
    )
  end

  erb :project_file
end
